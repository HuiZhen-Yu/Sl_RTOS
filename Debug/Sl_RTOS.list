
Sl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e44  08001e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e58  08001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001e6c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001e6c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000074cf  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001406  00000000  00000000  00027550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000610  00000000  00000000  00028958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000046d  00000000  00000000  00028f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034cf1  00000000  00000000  000293d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008ca0  00000000  00000000  0005e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014fa19  00000000  00000000  00066d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000168c  00000000  00000000  001b6780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000069  00000000  00000000  001b7e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001e2c 	.word	0x08001e2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001e2c 	.word	0x08001e2c

080002d8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_GPIO_Init+0x80>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a18      	ldr	r2, [pc, #96]	; (8000358 <MX_GPIO_Init+0x80>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_GPIO_Init+0x80>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0x80>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0x80>)
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_GPIO_Init+0x80>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2103      	movs	r1, #3
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <MX_GPIO_Init+0x84>)
 8000330:	f000 fd72 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000334:	2303      	movs	r3, #3
 8000336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x84>)
 800034c:	f000 fbb4 	bl	8000ab8 <HAL_GPIO_Init>

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	58024400 	.word	0x58024400
 800035c:	58020400 	.word	0x58020400

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000366:	4b43      	ldr	r3, [pc, #268]	; (8000474 <main+0x114>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d11b      	bne.n	80003aa <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000372:	f3bf 8f4f 	dsb	sy
}
 8000376:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000378:	f3bf 8f6f 	isb	sy
}
 800037c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800037e:	4b3d      	ldr	r3, [pc, #244]	; (8000474 <main+0x114>)
 8000380:	2200      	movs	r2, #0
 8000382:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000386:	f3bf 8f4f 	dsb	sy
}
 800038a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800038c:	f3bf 8f6f 	isb	sy
}
 8000390:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000392:	4b38      	ldr	r3, [pc, #224]	; (8000474 <main+0x114>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a37      	ldr	r2, [pc, #220]	; (8000474 <main+0x114>)
 8000398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800039c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800039e:	f3bf 8f4f 	dsb	sy
}
 80003a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003a4:	f3bf 8f6f 	isb	sy
}
 80003a8:	e000      	b.n	80003ac <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003aa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003ac:	4b31      	ldr	r3, [pc, #196]	; (8000474 <main+0x114>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d138      	bne.n	800042a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003b8:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <main+0x114>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003c0:	f3bf 8f4f 	dsb	sy
}
 80003c4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003c6:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <main+0x114>)
 80003c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003cc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	0b5b      	lsrs	r3, r3, #13
 80003d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003d6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	08db      	lsrs	r3, r3, #3
 80003dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003e0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	015a      	lsls	r2, r3, #5
 80003e6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80003ea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003f0:	4920      	ldr	r1, [pc, #128]	; (8000474 <main+0x114>)
 80003f2:	4313      	orrs	r3, r2
 80003f4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1e5a      	subs	r2, r3, #1
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ef      	bne.n	80003e2 <main+0x82>
    } while(sets-- != 0U);
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	1e5a      	subs	r2, r3, #1
 8000406:	60ba      	str	r2, [r7, #8]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1e5      	bne.n	80003d8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800040c:	f3bf 8f4f 	dsb	sy
}
 8000410:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <main+0x114>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a17      	ldr	r2, [pc, #92]	; (8000474 <main+0x114>)
 8000418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800041e:	f3bf 8f4f 	dsb	sy
}
 8000422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
}
 8000428:	e000      	b.n	800042c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800042a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042c:	f000 f99e 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000430:	f000 f824 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000434:	f7ff ff50 	bl	80002d8 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2101      	movs	r1, #1
 800043c:	480e      	ldr	r0, [pc, #56]	; (8000478 <main+0x118>)
 800043e:	f000 fceb 	bl	8000e18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_RED_Pin, SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2102      	movs	r1, #2
 8000446:	480c      	ldr	r0, [pc, #48]	; (8000478 <main+0x118>)
 8000448:	f000 fce6 	bl	8000e18 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800044c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000450:	f000 fa1e 	bl	8000890 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <main+0x118>)
 800045a:	f000 fcdd 	bl	8000e18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_RED_Pin, RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2102      	movs	r1, #2
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <main+0x118>)
 8000464:	f000 fcd8 	bl	8000e18 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f000 fa10 	bl	8000890 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000470:	e7e2      	b.n	8000438 <main+0xd8>
 8000472:	bf00      	nop
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	58020400 	.word	0x58020400

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b09c      	sub	sp, #112	; 0x70
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000486:	224c      	movs	r2, #76	; 0x4c
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fca2 	bl	8001dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2220      	movs	r2, #32
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fc9c 	bl	8001dd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800049c:	2002      	movs	r0, #2
 800049e:	f000 fcd5 	bl	8000e4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	4b31      	ldr	r3, [pc, #196]	; (800056c <SystemClock_Config+0xf0>)
 80004a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004aa:	4a30      	ldr	r2, [pc, #192]	; (800056c <SystemClock_Config+0xf0>)
 80004ac:	f023 0301 	bic.w	r3, r3, #1
 80004b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004b2:	4b2e      	ldr	r3, [pc, #184]	; (800056c <SystemClock_Config+0xf0>)
 80004b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <SystemClock_Config+0xf4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <SystemClock_Config+0xf4>)
 80004c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <SystemClock_Config+0xf4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004d4:	bf00      	nop
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <SystemClock_Config+0xf4>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e2:	d1f8      	bne.n	80004d6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e4:	2302      	movs	r3, #2
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ec:	2340      	movs	r3, #64	; 0x40
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	2302      	movs	r3, #2
 80004f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f4:	2300      	movs	r3, #0
 80004f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004f8:	2304      	movs	r3, #4
 80004fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80004fc:	2332      	movs	r3, #50	; 0x32
 80004fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000500:	2302      	movs	r3, #2
 8000502:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000504:	2302      	movs	r3, #2
 8000506:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800050c:	230c      	movs	r3, #12
 800050e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000510:	2300      	movs	r3, #0
 8000512:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fccf 	bl	8000ec0 <HAL_RCC_OscConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000528:	f000 f824 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	233f      	movs	r3, #63	; 0x3f
 800052e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000530:	2303      	movs	r3, #3
 8000532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000538:	2308      	movs	r3, #8
 800053a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800053c:	2340      	movs	r3, #64	; 0x40
 800053e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000540:	2340      	movs	r3, #64	; 0x40
 8000542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000548:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800054a:	2340      	movs	r3, #64	; 0x40
 800054c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2102      	movs	r1, #2
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f90e 	bl	8001774 <HAL_RCC_ClockConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800055e:	f000 f809 	bl	8000574 <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3770      	adds	r7, #112	; 0x70
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	58000400 	.word	0x58000400
 8000570:	58024800 	.word	0x58024800

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x30>)
 8000588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_MspInit+0x30>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_MspInit+0x30>)
 8000598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	58024400 	.word	0x58024400

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f926 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0xe4>)
 800060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000612:	4a36      	ldr	r2, [pc, #216]	; (80006ec <SystemInit+0xe4>)
 8000614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <SystemInit+0xe8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f003 030f 	and.w	r3, r3, #15
 8000624:	2b06      	cmp	r3, #6
 8000626:	d807      	bhi.n	8000638 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0xe8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f023 030f 	bic.w	r3, r3, #15
 8000630:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <SystemInit+0xe8>)
 8000632:	f043 0307 	orr.w	r3, r3, #7
 8000636:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <SystemInit+0xec>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <SystemInit+0xec>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <SystemInit+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <SystemInit+0xec>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4929      	ldr	r1, [pc, #164]	; (80006f4 <SystemInit+0xec>)
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemInit+0xf0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <SystemInit+0xe8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	2b00      	cmp	r3, #0
 8000660:	d007      	beq.n	8000672 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0xe8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f023 030f 	bic.w	r3, r3, #15
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0xe8>)
 800066c:	f043 0307 	orr.w	r3, r3, #7
 8000670:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemInit+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemInit+0xec>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <SystemInit+0xec>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <SystemInit+0xec>)
 8000686:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <SystemInit+0xf4>)
 8000688:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <SystemInit+0xec>)
 800068c:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0xf8>)
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <SystemInit+0xec>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <SystemInit+0xfc>)
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <SystemInit+0xec>)
 8000698:	2200      	movs	r2, #0
 800069a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <SystemInit+0xec>)
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <SystemInit+0xfc>)
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <SystemInit+0xec>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <SystemInit+0xec>)
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <SystemInit+0xfc>)
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <SystemInit+0xec>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <SystemInit+0xec>)
 80006ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <SystemInit+0xec>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <SystemInit+0x100>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <SystemInit+0x104>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006d2:	d202      	bcs.n	80006da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <SystemInit+0x108>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <SystemInit+0x10c>)
 80006dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	52002000 	.word	0x52002000
 80006f4:	58024400 	.word	0x58024400
 80006f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006fc:	02020200 	.word	0x02020200
 8000700:	01ff0000 	.word	0x01ff0000
 8000704:	01010280 	.word	0x01010280
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000750 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f7ff ff74 	bl	8000608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f001 fb4d 	bl	8001de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800074a:	f7ff fe09 	bl	8000360 <main>
  bx  lr
 800074e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000750:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000754:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000758:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800075c:	08001e5c 	.word	0x08001e5c
  ldr r2, =_sbss
 8000760:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000764:	24000030 	.word	0x24000030

08000768 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC3_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000772:	2003      	movs	r0, #3
 8000774:	f000 f96e 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000778:	f001 f9b2 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 800077c:	4602      	mov	r2, r0
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_Init+0x68>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	0a1b      	lsrs	r3, r3, #8
 8000784:	f003 030f 	and.w	r3, r3, #15
 8000788:	4913      	ldr	r1, [pc, #76]	; (80007d8 <HAL_Init+0x6c>)
 800078a:	5ccb      	ldrb	r3, [r1, r3]
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	fa22 f303 	lsr.w	r3, r2, r3
 8000794:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_Init+0x68>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_Init+0x6c>)
 80007a0:	5cd3      	ldrb	r3, [r2, r3]
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	fa22 f303 	lsr.w	r3, r2, r3
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <HAL_Init+0x70>)
 80007ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <HAL_Init+0x74>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f814 	bl	80007e4 <HAL_InitTick>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e002      	b.n	80007cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007c6:	f7ff fedb 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58024400 	.word	0x58024400
 80007d8:	08001e44 	.word	0x08001e44
 80007dc:	24000004 	.word	0x24000004
 80007e0:	24000000 	.word	0x24000000

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_InitTick+0x60>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e021      	b.n	800083c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_InitTick+0x64>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_InitTick+0x60>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f945 	bl	8000a9e <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f91d 	bl	8000a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_InitTick+0x68>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2400000c 	.word	0x2400000c
 8000848:	24000000 	.word	0x24000000
 800084c:	24000008 	.word	0x24000008

08000850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	2400002c 	.word	0x2400002c

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2400002c 	.word	0x2400002c

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ffee 	bl	8000878 <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffde 	bl	8000878 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2400000c 	.word	0x2400000c

080008d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_GetREVID+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	0c1b      	lsrs	r3, r3, #16
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	5c001000 	.word	0x5c001000

080008f0 <__NVIC_SetPriorityGrouping>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <__NVIC_SetPriorityGrouping+0x40>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	4313      	orrs	r3, r2
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x40>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00
 8000934:	05fa0000 	.word	0x05fa0000

08000938 <__NVIC_GetPriorityGrouping>:
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_SetPriority>:
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a20:	d301      	bcc.n	8000a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00f      	b.n	8000a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <SysTick_Config+0x40>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2e:	210f      	movs	r1, #15
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f7ff ff8e 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SysTick_Config+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SysTick_Config+0x40>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff47 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff5e 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff90 	bl	80009a8 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5f 	bl	8000954 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffb2 	bl	8000a10 <SysTick_Config>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ac6:	4b89      	ldr	r3, [pc, #548]	; (8000cec <HAL_GPIO_Init+0x234>)
 8000ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000aca:	e194      	b.n	8000df6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 8186 	beq.w	8000df0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d005      	beq.n	8000afc <HAL_GPIO_Init+0x44>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d130      	bne.n	8000b5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b32:	2201      	movs	r2, #1
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	091b      	lsrs	r3, r3, #4
 8000b48:	f003 0201 	and.w	r2, r3, #1
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d017      	beq.n	8000b9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d123      	bne.n	8000bee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	08da      	lsrs	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3208      	adds	r2, #8
 8000bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	69b9      	ldr	r1, [r7, #24]
 8000bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0203 	and.w	r2, r3, #3
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80e0 	beq.w	8000df0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_GPIO_Init+0x238>)
 8000c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c36:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <HAL_GPIO_Init+0x238>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <HAL_GPIO_Init+0x238>)
 8000c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <HAL_GPIO_Init+0x23c>)
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_GPIO_Init+0x240>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d052      	beq.n	8000d20 <HAL_GPIO_Init+0x268>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <HAL_GPIO_Init+0x244>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d031      	beq.n	8000ce6 <HAL_GPIO_Init+0x22e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_GPIO_Init+0x248>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d02b      	beq.n	8000ce2 <HAL_GPIO_Init+0x22a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_GPIO_Init+0x24c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d025      	beq.n	8000cde <HAL_GPIO_Init+0x226>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_GPIO_Init+0x250>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d01f      	beq.n	8000cda <HAL_GPIO_Init+0x222>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <HAL_GPIO_Init+0x254>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d019      	beq.n	8000cd6 <HAL_GPIO_Init+0x21e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <HAL_GPIO_Init+0x258>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x21a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_GPIO_Init+0x25c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x216>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_GPIO_Init+0x260>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x212>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_GPIO_Init+0x264>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	e02d      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	e02b      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cca:	2308      	movs	r3, #8
 8000ccc:	e029      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cce:	2307      	movs	r3, #7
 8000cd0:	e027      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	e025      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	e023      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cda:	2304      	movs	r3, #4
 8000cdc:	e021      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e01f      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e01d      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e01b      	b.n	8000d22 <HAL_GPIO_Init+0x26a>
 8000cea:	bf00      	nop
 8000cec:	58000080 	.word	0x58000080
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58000400 	.word	0x58000400
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58020800 	.word	0x58020800
 8000d04:	58020c00 	.word	0x58020c00
 8000d08:	58021000 	.word	0x58021000
 8000d0c:	58021400 	.word	0x58021400
 8000d10:	58021800 	.word	0x58021800
 8000d14:	58021c00 	.word	0x58021c00
 8000d18:	58022000 	.word	0x58022000
 8000d1c:	58022400 	.word	0x58022400
 8000d20:	2300      	movs	r3, #0
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	f002 0203 	and.w	r2, r2, #3
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d32:	4938      	ldr	r1, [pc, #224]	; (8000e14 <HAL_GPIO_Init+0x35c>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	3301      	adds	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f47f ae63 	bne.w	8000acc <HAL_GPIO_Init+0x14>
  }
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	3724      	adds	r7, #36	; 0x24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	58000400 	.word	0x58000400

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	619a      	str	r2, [r3, #24]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_PWREx_ConfigSupply+0x70>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00a      	beq.n	8000e76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_PWREx_ConfigSupply+0x70>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d001      	beq.n	8000e72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e01f      	b.n	8000eb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e01d      	b.n	8000eb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_PWREx_ConfigSupply+0x70>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	f023 0207 	bic.w	r2, r3, #7
 8000e7e:	490f      	ldr	r1, [pc, #60]	; (8000ebc <HAL_PWREx_ConfigSupply+0x70>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000e86:	f7ff fcf7 	bl	8000878 <HAL_GetTick>
 8000e8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e8c:	e009      	b.n	8000ea2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000e8e:	f7ff fcf3 	bl	8000878 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e9c:	d901      	bls.n	8000ea2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e007      	b.n	8000eb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_PWREx_ConfigSupply+0x70>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eae:	d1ee      	bne.n	8000e8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	58024800 	.word	0x58024800

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f000 bc48 	b.w	8001764 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 8088 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee2:	4b99      	ldr	r3, [pc, #612]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000eec:	4b96      	ldr	r3, [pc, #600]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef4:	2b10      	cmp	r3, #16
 8000ef6:	d007      	beq.n	8000f08 <HAL_RCC_OscConfig+0x48>
 8000ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efa:	2b18      	cmp	r3, #24
 8000efc:	d111      	bne.n	8000f22 <HAL_RCC_OscConfig+0x62>
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d10c      	bne.n	8000f22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4b8f      	ldr	r3, [pc, #572]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d06d      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x130>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d169      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f000 bc21 	b.w	8001764 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d106      	bne.n	8000f3a <HAL_RCC_OscConfig+0x7a>
 8000f2c:	4b86      	ldr	r3, [pc, #536]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a85      	ldr	r2, [pc, #532]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e02e      	b.n	8000f98 <HAL_RCC_OscConfig+0xd8>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x9c>
 8000f42:	4b81      	ldr	r3, [pc, #516]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a80      	ldr	r2, [pc, #512]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b7e      	ldr	r3, [pc, #504]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a7d      	ldr	r2, [pc, #500]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e01d      	b.n	8000f98 <HAL_RCC_OscConfig+0xd8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0xc0>
 8000f66:	4b78      	ldr	r3, [pc, #480]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a77      	ldr	r2, [pc, #476]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b75      	ldr	r3, [pc, #468]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a74      	ldr	r2, [pc, #464]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_RCC_OscConfig+0xd8>
 8000f80:	4b71      	ldr	r3, [pc, #452]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a70      	ldr	r2, [pc, #448]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6d      	ldr	r2, [pc, #436]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc6a 	bl	8000878 <HAL_GetTick>
 8000fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fc66 	bl	8000878 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e3d4      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fba:	4b63      	ldr	r3, [pc, #396]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xe8>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc56 	bl	8000878 <HAL_GetTick>
 8000fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fc52 	bl	8000878 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e3c0      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fe2:	4b59      	ldr	r3, [pc, #356]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x110>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80ca 	beq.w	8001194 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001000:	4b51      	ldr	r3, [pc, #324]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001008:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <HAL_RCC_OscConfig+0x166>
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	2b18      	cmp	r3, #24
 800101a:	d156      	bne.n	80010ca <HAL_RCC_OscConfig+0x20a>
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d151      	bne.n	80010ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x17e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e392      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 0219 	bic.w	r2, r3, #25
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	493f      	ldr	r1, [pc, #252]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fc12 	bl	8000878 <HAL_GetTick>
 8001054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fc0e 	bl	8000878 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e37c      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001076:	f7ff fc2f 	bl	80008d8 <HAL_GetREVID>
 800107a:	4603      	mov	r3, r0
 800107c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001080:	4293      	cmp	r3, r2
 8001082:	d817      	bhi.n	80010b4 <HAL_RCC_OscConfig+0x1f4>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b40      	cmp	r3, #64	; 0x40
 800108a:	d108      	bne.n	800109e <HAL_RCC_OscConfig+0x1de>
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001094:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	e07a      	b.n	8001194 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	031b      	lsls	r3, r3, #12
 80010ac:	4926      	ldr	r1, [pc, #152]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b2:	e06f      	b.n	8001194 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	4921      	ldr	r1, [pc, #132]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c8:	e064      	b.n	8001194 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d047      	beq.n	8001162 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 0219 	bic.w	r2, r3, #25
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	491a      	ldr	r1, [pc, #104]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fbc8 	bl	8000878 <HAL_GetTick>
 80010e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fbc4 	bl	8000878 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e332      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	f7ff fbe5 	bl	80008d8 <HAL_GetREVID>
 800110e:	4603      	mov	r3, r0
 8001110:	f241 0203 	movw	r2, #4099	; 0x1003
 8001114:	4293      	cmp	r3, r2
 8001116:	d819      	bhi.n	800114c <HAL_RCC_OscConfig+0x28c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b40      	cmp	r3, #64	; 0x40
 800111e:	d108      	bne.n	8001132 <HAL_RCC_OscConfig+0x272>
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	6053      	str	r3, [r2, #4]
 8001130:	e030      	b.n	8001194 <HAL_RCC_OscConfig+0x2d4>
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	031b      	lsls	r3, r3, #12
 8001140:	4901      	ldr	r1, [pc, #4]	; (8001148 <HAL_RCC_OscConfig+0x288>)
 8001142:	4313      	orrs	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
 8001146:	e025      	b.n	8001194 <HAL_RCC_OscConfig+0x2d4>
 8001148:	58024400 	.word	0x58024400
 800114c:	4b9a      	ldr	r3, [pc, #616]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	061b      	lsls	r3, r3, #24
 800115a:	4997      	ldr	r1, [pc, #604]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
 8001160:	e018      	b.n	8001194 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001162:	4b95      	ldr	r3, [pc, #596]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a94      	ldr	r2, [pc, #592]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fb83 	bl	8000878 <HAL_GetTick>
 8001172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fb7f 	bl	8000878 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e2ed      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001188:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80a9 	beq.w	80012f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ac:	4b82      	ldr	r3, [pc, #520]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d007      	beq.n	80011c8 <HAL_RCC_OscConfig+0x308>
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b18      	cmp	r3, #24
 80011bc:	d13a      	bne.n	8001234 <HAL_RCC_OscConfig+0x374>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d135      	bne.n	8001234 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011c8:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x320>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b80      	cmp	r3, #128	; 0x80
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e2c1      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011e0:	f7ff fb7a 	bl	80008d8 <HAL_GetREVID>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d817      	bhi.n	800121e <HAL_RCC_OscConfig+0x35e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b20      	cmp	r3, #32
 80011f4:	d108      	bne.n	8001208 <HAL_RCC_OscConfig+0x348>
 80011f6:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011fe:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001204:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001206:	e075      	b.n	80012f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001208:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	069b      	lsls	r3, r3, #26
 8001216:	4968      	ldr	r1, [pc, #416]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800121c:	e06a      	b.n	80012f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800121e:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	061b      	lsls	r3, r3, #24
 800122c:	4962      	ldr	r1, [pc, #392]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800122e:	4313      	orrs	r3, r2
 8001230:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001232:	e05f      	b.n	80012f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d042      	beq.n	80012c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a5d      	ldr	r2, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fb16 	bl	8000878 <HAL_GetTick>
 800124c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001250:	f7ff fb12 	bl	8000878 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e280      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800126e:	f7ff fb33 	bl	80008d8 <HAL_GetREVID>
 8001272:	4603      	mov	r3, r0
 8001274:	f241 0203 	movw	r2, #4099	; 0x1003
 8001278:	4293      	cmp	r3, r2
 800127a:	d817      	bhi.n	80012ac <HAL_RCC_OscConfig+0x3ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	2b20      	cmp	r3, #32
 8001282:	d108      	bne.n	8001296 <HAL_RCC_OscConfig+0x3d6>
 8001284:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800128e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001292:	6053      	str	r3, [r2, #4]
 8001294:	e02e      	b.n	80012f4 <HAL_RCC_OscConfig+0x434>
 8001296:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	069b      	lsls	r3, r3, #26
 80012a4:	4944      	ldr	r1, [pc, #272]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
 80012aa:	e023      	b.n	80012f4 <HAL_RCC_OscConfig+0x434>
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	493f      	ldr	r1, [pc, #252]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	60cb      	str	r3, [r1, #12]
 80012c0:	e018      	b.n	80012f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80012c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fad3 	bl	8000878 <HAL_GetTick>
 80012d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012d6:	f7ff facf 	bl	8000878 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e23d      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d036      	beq.n	800136e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d019      	beq.n	800133c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800130a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130c:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001314:	f7ff fab0 	bl	8000878 <HAL_GetTick>
 8001318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff faac 	bl	8000878 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e21a      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x45c>
 800133a:	e018      	b.n	800136e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fa96 	bl	8000878 <HAL_GetTick>
 800134c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fa92 	bl	8000878 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e200      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d039      	beq.n	80013ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01c      	beq.n	80013bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800138e:	f7ff fa73 	bl	8000878 <HAL_GetTick>
 8001392:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001396:	f7ff fa6f 	bl	8000878 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1dd      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x4d6>
 80013b4:	e01b      	b.n	80013ee <HAL_RCC_OscConfig+0x52e>
 80013b6:	bf00      	nop
 80013b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013bc:	4b9b      	ldr	r3, [pc, #620]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a9a      	ldr	r2, [pc, #616]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80013c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fa56 	bl	8000878 <HAL_GetTick>
 80013cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d0:	f7ff fa52 	bl	8000878 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1c0      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013e2:	4b92      	ldr	r3, [pc, #584]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8081 	beq.w	80014fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013fc:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <HAL_RCC_OscConfig+0x770>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a8b      	ldr	r2, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x770>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001408:	f7ff fa36 	bl	8000878 <HAL_GetTick>
 800140c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001410:	f7ff fa32 	bl	8000878 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1a0      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001422:	4b83      	ldr	r3, [pc, #524]	; (8001630 <HAL_RCC_OscConfig+0x770>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x584>
 8001436:	4b7d      	ldr	r3, [pc, #500]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a7c      	ldr	r2, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	e02d      	b.n	80014a0 <HAL_RCC_OscConfig+0x5e0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10c      	bne.n	8001466 <HAL_RCC_OscConfig+0x5a6>
 800144c:	4b77      	ldr	r3, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a76      	ldr	r2, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	4b74      	ldr	r3, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a73      	ldr	r2, [pc, #460]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	e01c      	b.n	80014a0 <HAL_RCC_OscConfig+0x5e0>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b05      	cmp	r3, #5
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c8>
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a6b      	ldr	r2, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0x5e0>
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a67      	ldr	r2, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
 8001494:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800149a:	f023 0304 	bic.w	r3, r3, #4
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d015      	beq.n	80014d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff f9e6 	bl	8000878 <HAL_GetTick>
 80014ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff f9e2 	bl	8000878 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e14e      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0ee      	beq.n	80014b0 <HAL_RCC_OscConfig+0x5f0>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff f9d0 	bl	8000878 <HAL_GetTick>
 80014d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff f9cc 	bl	8000878 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e138      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f2:	4b4e      	ldr	r3, [pc, #312]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ee      	bne.n	80014dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 812d 	beq.w	8001762 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001510:	2b18      	cmp	r3, #24
 8001512:	f000 80bd 	beq.w	8001690 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	2b02      	cmp	r3, #2
 800151c:	f040 809e 	bne.w	800165c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a41      	ldr	r2, [pc, #260]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800152a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff f9a4 	bl	8000878 <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff f9a0 	bl	8000878 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e10e      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x774>)
 8001558:	4013      	ands	r3, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	430a      	orrs	r2, r1
 8001566:	4931      	ldr	r1, [pc, #196]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001568:	4313      	orrs	r3, r2
 800156a:	628b      	str	r3, [r1, #40]	; 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	3b01      	subs	r3, #1
 8001572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	3b01      	subs	r3, #1
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	b29b      	uxth	r3, r3
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001586:	3b01      	subs	r3, #1
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	3b01      	subs	r3, #1
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800159c:	4923      	ldr	r1, [pc, #140]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_RCC_OscConfig+0x778>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015ba:	00d2      	lsls	r2, r2, #3
 80015bc:	491b      	ldr	r1, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f023 020c 	bic.w	r2, r3, #12
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4917      	ldr	r1, [pc, #92]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	f023 0202 	bic.w	r2, r3, #2
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	4912      	ldr	r1, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_RCC_OscConfig+0x76c>)
 800161c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff f929 	bl	8000878 <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001628:	e011      	b.n	800164e <HAL_RCC_OscConfig+0x78e>
 800162a:	bf00      	nop
 800162c:	58024400 	.word	0x58024400
 8001630:	58024800 	.word	0x58024800
 8001634:	fffffc0c 	.word	0xfffffc0c
 8001638:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f91c 	bl	8000878 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e08a      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x77c>
 800165a:	e082      	b.n	8001762 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a42      	ldr	r2, [pc, #264]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f906 	bl	8000878 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff f902 	bl	8000878 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e070      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x7b0>
 800168e:	e068      	b.n	8001762 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d031      	beq.n	8001708 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f003 0203 	and.w	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d12a      	bne.n	8001708 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d122      	bne.n	8001708 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d11a      	bne.n	8001708 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0a5b      	lsrs	r3, r3, #9
 80016d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d111      	bne.n	8001708 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d108      	bne.n	8001708 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	0e1b      	lsrs	r3, r3, #24
 80016fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001702:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e02b      	b.n	8001764 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001716:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	429a      	cmp	r2, r3
 8001720:	d01f      	beq.n	8001762 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800172e:	f7ff f8a3 	bl	8000878 <HAL_GetTick>
 8001732:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001734:	bf00      	nop
 8001736:	f7ff f89f 	bl	8000878 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	4293      	cmp	r3, r2
 8001740:	d0f9      	beq.n	8001736 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x8b0>)
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800174e:	00d2      	lsls	r2, r2, #3
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001752:	4313      	orrs	r3, r2
 8001754:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_RCC_OscConfig+0x8ac>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400
 8001770:	ffff0007 	.word	0xffff0007

08001774 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e19c      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 020f 	bic.w	r2, r3, #15
 800179e:	4985      	ldr	r1, [pc, #532]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e184      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d908      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	4975      	ldr	r1, [pc, #468]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017fe:	429a      	cmp	r2, r3
 8001800:	d908      	bls.n	8001814 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	496a      	ldr	r1, [pc, #424]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001810:	4313      	orrs	r3, r2
 8001812:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d010      	beq.n	8001842 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800182c:	429a      	cmp	r2, r3
 800182e:	d908      	bls.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	495e      	ldr	r1, [pc, #376]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800183e:	4313      	orrs	r3, r2
 8001840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185a:	429a      	cmp	r2, r3
 800185c:	d908      	bls.n	8001870 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4953      	ldr	r1, [pc, #332]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800186c:	4313      	orrs	r3, r2
 800186e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	429a      	cmp	r2, r3
 800188a:	d908      	bls.n	800189e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f023 020f 	bic.w	r2, r3, #15
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4947      	ldr	r1, [pc, #284]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 800189a:	4313      	orrs	r3, r2
 800189c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d055      	beq.n	8001956 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4940      	ldr	r1, [pc, #256]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d121      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0f6      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d115      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0ea      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0de      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d6      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f023 0207 	bic.w	r2, r3, #7
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4925      	ldr	r1, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001922:	4313      	orrs	r3, r2
 8001924:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001926:	f7fe ffa7 	bl	8000878 <HAL_GetTick>
 800192a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192c:	e00a      	b.n	8001944 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192e:	f7fe ffa3 	bl	8000878 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0be      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	429a      	cmp	r2, r3
 8001954:	d1eb      	bne.n	800192e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	429a      	cmp	r2, r3
 8001970:	d208      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f023 020f 	bic.w	r2, r3, #15
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <HAL_RCC_ClockConfig+0x244>)
 8001980:	4313      	orrs	r3, r2
 8001982:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d214      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 020f 	bic.w	r2, r3, #15
 800199a:	4906      	ldr	r1, [pc, #24]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_RCC_ClockConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e086      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x34e>
 80019b4:	52002000 	.word	0x52002000
 80019b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d208      	bcs.n	80019ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4939      	ldr	r1, [pc, #228]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d208      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	492e      	ldr	r1, [pc, #184]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d208      	bcs.n	8001a46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4922      	ldr	r1, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d208      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4917      	ldr	r1, [pc, #92]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a74:	f000 f834 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	4912      	ldr	r1, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x35c>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x358>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_RCC_ClockConfig+0x35c>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x360>)
 8001aaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x364>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x368>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fe94 	bl	80007e4 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	08001e44 	.word	0x08001e44
 8001ad4:	24000004 	.word	0x24000004
 8001ad8:	24000000 	.word	0x24000000
 8001adc:	24000008 	.word	0x24000008

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae6:	4bb3      	ldr	r3, [pc, #716]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aee:	2b18      	cmp	r3, #24
 8001af0:	f200 8155 	bhi.w	8001d9e <HAL_RCC_GetSysClockFreq+0x2be>
 8001af4:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afa:	bf00      	nop
 8001afc:	08001b61 	.word	0x08001b61
 8001b00:	08001d9f 	.word	0x08001d9f
 8001b04:	08001d9f 	.word	0x08001d9f
 8001b08:	08001d9f 	.word	0x08001d9f
 8001b0c:	08001d9f 	.word	0x08001d9f
 8001b10:	08001d9f 	.word	0x08001d9f
 8001b14:	08001d9f 	.word	0x08001d9f
 8001b18:	08001d9f 	.word	0x08001d9f
 8001b1c:	08001b87 	.word	0x08001b87
 8001b20:	08001d9f 	.word	0x08001d9f
 8001b24:	08001d9f 	.word	0x08001d9f
 8001b28:	08001d9f 	.word	0x08001d9f
 8001b2c:	08001d9f 	.word	0x08001d9f
 8001b30:	08001d9f 	.word	0x08001d9f
 8001b34:	08001d9f 	.word	0x08001d9f
 8001b38:	08001d9f 	.word	0x08001d9f
 8001b3c:	08001b8d 	.word	0x08001b8d
 8001b40:	08001d9f 	.word	0x08001d9f
 8001b44:	08001d9f 	.word	0x08001d9f
 8001b48:	08001d9f 	.word	0x08001d9f
 8001b4c:	08001d9f 	.word	0x08001d9f
 8001b50:	08001d9f 	.word	0x08001d9f
 8001b54:	08001d9f 	.word	0x08001d9f
 8001b58:	08001d9f 	.word	0x08001d9f
 8001b5c:	08001b93 	.word	0x08001b93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b60:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	4a90      	ldr	r2, [pc, #576]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001b7e:	e111      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b80:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b82:	61bb      	str	r3, [r7, #24]
      break;
 8001b84:	e10e      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001b86:	4b8d      	ldr	r3, [pc, #564]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b88:	61bb      	str	r3, [r7, #24]
      break;
 8001b8a:	e10b      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001b8e:	61bb      	str	r3, [r7, #24]
      break;
 8001b90:	e108      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001b9c:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ba8:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001bb2:	4b80      	ldr	r3, [pc, #512]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80e1 	beq.w	8001d98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f000 8083 	beq.w	8001ce4 <HAL_RCC_GetSysClockFreq+0x204>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	f200 80a1 	bhi.w	8001d28 <HAL_RCC_GetSysClockFreq+0x248>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x114>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d056      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001bf2:	e099      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d02d      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c00:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	4a6b      	ldr	r2, [pc, #428]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c2a:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001c5a:	e087      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001dc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c9e:	e065      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001caa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ce2:	e043      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001dd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d26:	e021      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001dcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001dc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	0a5b      	lsrs	r3, r3, #9
 8001d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d76:	3301      	adds	r3, #1
 8001d78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d90:	ee17 3a90 	vmov	r3, s15
 8001d94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001d96:	e005      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
      break;
 8001d9c:	e002      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001da0:	61bb      	str	r3, [r7, #24]
      break;
 8001da2:	bf00      	nop
  }

  return sysclockfreq;
 8001da4:	69bb      	ldr	r3, [r7, #24]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	58024400 	.word	0x58024400
 8001db8:	03d09000 	.word	0x03d09000
 8001dbc:	003d0900 	.word	0x003d0900
 8001dc0:	017d7840 	.word	0x017d7840
 8001dc4:	46000000 	.word	0x46000000
 8001dc8:	4c742400 	.word	0x4c742400
 8001dcc:	4a742400 	.word	0x4a742400
 8001dd0:	4bbebc20 	.word	0x4bbebc20

08001dd4 <memset>:
 8001dd4:	4402      	add	r2, r0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d100      	bne.n	8001dde <memset+0xa>
 8001ddc:	4770      	bx	lr
 8001dde:	f803 1b01 	strb.w	r1, [r3], #1
 8001de2:	e7f9      	b.n	8001dd8 <memset+0x4>

08001de4 <__libc_init_array>:
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	4d0d      	ldr	r5, [pc, #52]	; (8001e1c <__libc_init_array+0x38>)
 8001de8:	4c0d      	ldr	r4, [pc, #52]	; (8001e20 <__libc_init_array+0x3c>)
 8001dea:	1b64      	subs	r4, r4, r5
 8001dec:	10a4      	asrs	r4, r4, #2
 8001dee:	2600      	movs	r6, #0
 8001df0:	42a6      	cmp	r6, r4
 8001df2:	d109      	bne.n	8001e08 <__libc_init_array+0x24>
 8001df4:	4d0b      	ldr	r5, [pc, #44]	; (8001e24 <__libc_init_array+0x40>)
 8001df6:	4c0c      	ldr	r4, [pc, #48]	; (8001e28 <__libc_init_array+0x44>)
 8001df8:	f000 f818 	bl	8001e2c <_init>
 8001dfc:	1b64      	subs	r4, r4, r5
 8001dfe:	10a4      	asrs	r4, r4, #2
 8001e00:	2600      	movs	r6, #0
 8001e02:	42a6      	cmp	r6, r4
 8001e04:	d105      	bne.n	8001e12 <__libc_init_array+0x2e>
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
 8001e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e0c:	4798      	blx	r3
 8001e0e:	3601      	adds	r6, #1
 8001e10:	e7ee      	b.n	8001df0 <__libc_init_array+0xc>
 8001e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e16:	4798      	blx	r3
 8001e18:	3601      	adds	r6, #1
 8001e1a:	e7f2      	b.n	8001e02 <__libc_init_array+0x1e>
 8001e1c:	08001e54 	.word	0x08001e54
 8001e20:	08001e54 	.word	0x08001e54
 8001e24:	08001e54 	.word	0x08001e54
 8001e28:	08001e58 	.word	0x08001e58

08001e2c <_init>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	bf00      	nop
 8001e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e32:	bc08      	pop	{r3}
 8001e34:	469e      	mov	lr, r3
 8001e36:	4770      	bx	lr

08001e38 <_fini>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr
